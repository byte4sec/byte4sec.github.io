{"pages":[{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"}],"posts":[{"title":"测试ea2","text":"摘要首页显示摘要内容（替换成自己的） 正文内容（替换成自己的）","link":"/2021/10/09/ea2/"},{"title":"Git-rebase-用法示例小结","text":"看过上一篇文章【Git如何优雅地回退代码】的小伙伴们，肯定还有很多跟我一样对rebase的使用还是云里雾里的，这篇文章将使你彻底搞明白怎么使用。rebase在git中是一个非常有魅力的命令，使用得当会极大提高自己的工作效率；相反，如果乱用，会给团队中其他人带来麻烦。它的作用简要概括为：可以对某一段线性提交历史进行编辑、删除、复制、粘贴；因此，合理使用rebase命令可以使我们的提交历史干净、简洁！ 前提：不要通过rebase对任何已经提交到公共仓库中的commit进行修改（你自己一个人玩的分支除外） 一、合并多个commit为一个完整commit当我3们在本地仓库中提交了多次，在我们把本地提交push到公共仓库中之前，为了让提交记录更简洁明了，我们希望把如下分支B、C、D三个提交记录合并为一个完整的提交，然后再push到公共仓库。 现在我们在测试分支上添fff加了四次提交，我们的目标是把最后三个提交合并为一个提交： 这里我们使用命令: 1git rebase -i [startpoint] [endpoint] 其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。 在查看到了log日志后，我们运行以下命令： 1git rebase -i 36224db or 1git rebase -i HEAD~3 然后我们会看到如下界面: 上面未被注释的部分列出的是我们本次rebase操作包含的所有提交，下面注释部分是git为我们提供的命令说明。每一个commit id 前面的pick表示指令类型，git 为我们提供了以下几个命令: pick：保留该commit（缩写:p） reword：保留该commit，但我需要修改该commit的注释（缩写:r） edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e） squash：将该commit和前一个commit合并（缩写:s） fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f） exec：执行shell命令（缩写:x） drop：我要丢弃该commit（缩写:d） 根据我们的需求，我们将commit内容编辑如下: 此做法是把后面两次提交都合并到第一次提交里，改完上面的操作后执行vim：wq保存信息，之后会跳出下面的修改注释界面： 编辑完保存即可完成commit的合并了： 二、将某一段commit粘贴到另一个分支上当我们项目中存在多个分支，有时候我们需要将某一个分支中的一段提交同时应用到其他分支中，就像下图： 我们希望将develop分支中的C~E部分复制到master分支中，这时我们就可以通过rebase命令来实现（如果只是复制某一两个提交到其他分支，建议使用更简单的命令:git cherry-pick）。 在实际模拟中，我们创建了master和develop两个分支: master分支: develop分支: 我们使用命令的形式为: 1git rebase [startpoint] [endpoint] --onto [branchName] 其中，[startpoint] [endpoint]仍然和上一个命令一样指定了一个编辑区间(前开后闭)，--onto的意思是要将该指定的提交复制到哪个分支上。 所以，在找到C(90bc0045b)和E(5de0da9f2)的提交id后，我们运行以下命令： 1git rebase 90bc0045b^ 5de0da9f2 --onto master 以上命令有网友补充内容： 大帅_8183 15楼 2019.05.26 17:30 博主，关于你说的“[startpoint] [endpoint]仍然和上一个命令一样指定了一个编辑区间(前开后闭)” ，其中的前开后闭的思维，其实是有歧义的。 如果一定要用“区间”来表示的话， 那它表示的也一定是一个“前闭后闭”的区间；至于，博主理解的“前开后闭”,其实是博主想使用[startpoint] 这个commit上的功能，但这部分功能本身 就是 上 一个commit提交功能后生成的新的commit(也就是 这里的[startpoint])； 而原rebase的[startpoint] 的意思是，应该是表示，在此commit开始（[startpoint]）更改的代码部分； andy_dfa5 5楼 2018.08.13 14:14 作者写的很好，但是有个小错误，就是rebase是一个开闭集，就是上面例子中 git rebase 90bc0045b^ 5de0da9f2 –onto master。90bc0045b^这个提交是不会生效的，如果要这个生效要从b4d576开始rebase 关于上面的质疑自己动手试下就知道结果了。 注:因为[startpoint] [endpoint]指定的是一个前开后闭的区间，为了让这个区间包含C提交，我们将区间起始点向后退了一步。运行完成后查看当前分支的日志: 可以看到，C~E部分的提交内容已经复制到了G的后面了，大功告成？NO！我们看一下当前分支的状态: 当前HEAD处于游离状态，实际上，此时所有分支的状态应该是这样: 所以，虽然此时HEAD所指向的内容正是我们所需要的，但是master分支是没有任何变化的，git只是将C~E部分的提交内容复制一份粘贴到了master所指向的提交后面，我们需要做的就是将master所指向的提交id设置为当前HEAD所指向的提交id就可以了，即: 12git checkout mastergit reset --hard 0c72e64 此时我们才大功告成！","link":"/2020/02/02/ea1/"},{"title":"测试博客1","text":"首页显示摘要内容（替换成自己的） 一、合并多个commit为一个完整commit当我们在本地仓库中提交了多次，在我们把本地提交push到公共仓库中之前，为了让提交记录更简洁明了，我们希望把如下分支B、C、D三个提交记录合并为一个完整的提交，然后再push到公共仓库。 现在我们在测试分支上添加了四次提交，我们的目标是把最后三个提交合并为一个提交： 这里我们使用命令: 1git rebase -i [startpoint] [endpoint]","link":"/2021/10/09/startup/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"rebase","slug":"rebase","link":"/tags/rebase/"},{"name":"好","slug":"好","link":"/tags/%E5%A5%BD/"},{"name":"优秀","slug":"优秀","link":"/tags/%E4%BC%98%E7%A7%80/"},{"name":"棒","slug":"棒","link":"/tags/%E6%A3%92/"}],"categories":[{"name":"基础工具类","slug":"基础工具类","link":"/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"Git","slug":"基础工具类/Git","link":"/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/Git/"},{"name":"Web技术","slug":"Web技术","link":"/categories/Web%E6%8A%80%E6%9C%AF/"},{"name":"生活琐事","slug":"Web技术/生活琐事","link":"/categories/Web%E6%8A%80%E6%9C%AF/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/"},{"name":"算法练习","slug":"Web技术/生活琐事/算法练习","link":"/categories/Web%E6%8A%80%E6%9C%AF/%E7%94%9F%E6%B4%BB%E7%90%90%E4%BA%8B/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"}]}